# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "CodeQL"

on:
  push:
    branches: [ "main" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "main" ]
  schedule:
    - cron: '44 20 * * 2'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java', 'javascript', 'python' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality


    # Autobuild attempts to build any compiled languages  (C/C++, C#, Go, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

    #   If the Autobuild fails above, remove it and uncomment the following three lines.
    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

    # - run: |
    #   echo "Run, Build Application using script"
    #   ./location_of_script_within_repo/buildscript.sh

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"

- name: branch-deploy
  uses: github/branch-deploy@v3.0.3
  with:
    # The GitHub token used to create an authenticated client - Provided for you by default!
    github_token: # default is ${{ github.token }}
    # The status of the GitHub Actions - For use in the post run workflow - Provided for you by default!
    status: # default is ${{ job.status }}
    # The name of the default environment to deploy to. Example, "production"
    environment: # optional, default is production
    # Optional target environments to select for use with deployments. Example, "production,development,staging"
    environment_targets: # optional, default is production,development,staging
    # If set, the specified emoji "reaction" is put on the comment to indicate that the trigger was detected. For example, "rocket" or "eyes"
    reaction: # optional, default is eyes
    # The string to look for in comments as an IssueOps trigger. Example: ".deploy"
    trigger: # optional, default is .deploy
    # The string to look for in comments as an IssueOps noop trigger. Example: "noop"
    noop_trigger: # optional, default is noop
    # The string to look for in comments as an IssueOps lock trigger. Used for locking branch deployments on a specific branch. Example: "lock"
    lock_trigger: # optional, default is .lock
    # The string to look for in comments as an IssueOps unlock trigger. Used for unlocking branch deployments. Example: "unlock"
    unlock_trigger: # optional, default is .unlock
    # An alias or shortcut to get details about the current lock (if it exists) Example: ".info"
    lock_info_alias: # optional, default is .wcid
    # The name of a stable branch to deploy to (rollbacks). Example: "main"
    stable_branch: # optional, default is main
    # If "false", the trigger can match anywhere in the comment
    prefix_only: # optional, default is true
    # Determine how you want this Action to handle "out-of-date" branches. Available options: "disabled", "warn", "force". "disabled" means that the Action will not care if a branch is out-of-date. "warn" means that the Action will warn the user that a branch is out-of-date and exit without deploying. "force" means that the Action will force update the branch. Note: The "force" option is not recommended due to Actions not being able to re-run CI on commits originating from Actions itself
    update_branch: # optional, default is warn
    # Manually enforce commit status checks before a deployment can continue. Only use this option if you wish to manually override the settings you have configured for your branch protection settings for your GitHub repository. Default is "false - Example value: "context1,context2,context3" - In most cases you will not need to touch this option
    required_contexts: # optional, default is false
    # Allow branch deployments to run on repository forks. If you want to harden your workflows, this option can be set to false. Default is "true"
    allow_forks: # optional, default is true
    # A comma seperated list of GitHub usernames or teams that should be considered admins by this Action. Admins can deploy pull requests without the need for branch protection approvals. Example: "monalisa,octocat,my-org/my-team"
    admins: # optional, default is false
    # A GitHub personal access token with "read:org" scopes. This is only needed if you are using the "admins" option with a GitHub org team. For example: "my-org/my-team"
    admins_pat: # optional, default is false
